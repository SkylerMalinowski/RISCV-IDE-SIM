/* Generated By:JavaCC: Do not edit this line. Parser.java */
package assembler;

import java.io.*;
import java.util.*;

public class Parser implements ParserConstants {
  public static void theThing(String filePath)
  {
    try
    {
      Parser parser = new Parser(new FileInputStream(filePath));
      parser.Analyze();
    }
    catch (Exception e)
    {
      System.out.println("NOK.");
      System.out.println(e.getMessage());
      //System.exit(0);
    }
    catch (Error e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      //System.exit(0);
    }
  }

  /**
   * Deep Error Recovery :: If an exception is thrown, reset parsing to the given @param after the error.
   * @param kind : TOKEN or element
   */
  void SkipTo (int kind)
  {
    ParseException e = generateParseException();
    System.out.println(e.toString());

    // Skip to kind
    ///*
    Token t;
    do {
      t = getNextToken();
    } while (t.kind != kind);
    //*/

    // Skip to one before kind
    /*
    Token t = getToken(0);
    while (t.next.kind != EOF && t.next.kind != kind) {
      t = getNextToken();
    }
    */
  }

  public static void main(String args []) throws ParseException
  {
    try
    {
      Parser parser = new Parser(System.in);
      System.out.println("Reading from standard input...");
      System.out.print("Enter code : ");
      parser.Analyze();
    }
    catch (Exception e)
    {
      System.out.println("NOK.");
      System.out.println(e.getMessage());
      //Parser.ReInit(System.in);
      System.exit(0);
    }
    catch (Error e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      System.exit(0);
    }
  }

// TODO : token states for instruction types, braces, bases, and extensions

/**
 * Function Declarations
 */

// TODO : make custom error reporting
  final public void Analyze() throws ParseException {
    trace_call("Analyze");
    try {
      try {
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 0:
          case DIRECTIVE:
          case LABEL:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LABEL:
            Label();
            break;
          case DIRECTIVE:
            Directive();
            break;
          case 0:
            Instruction();
            break;
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseException e) {
    System.out.println(e.toString());
    SkipTo(EOL);
      }
    } finally {
      trace_return("Analyze");
    }
  }

  final public void Label() throws ParseException {
    trace_call("Label");
    try {
      jj_consume_token(LABEL);
    } finally {
      trace_return("Label");
    }
  }

// TODO : more directive tokens for robust directive detection
// "https://github.com/riscv/riscv-asm-manual/blob/master/riscv-asm.md" :: directives
  final public void Directive() throws ParseException {
    trace_call("Directive");
    try {
      jj_consume_token(DIRECTIVE);
      jj_consume_token(ALPHA);
    } finally {
      trace_return("Directive");
    }
  }

  final public void Instruction() throws ParseException {
    trace_call("Instruction");
    try {
      jj_consume_token(0);
    } finally {
      trace_return("Instruction");
    }
  }

  final public void R_Type() throws ParseException {
    trace_call("R_Type");
    try {
      jj_consume_token(INSTRUCTION);
      jj_consume_token(REGISTER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(REGISTER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(REGISTER);
    } finally {
      trace_return("R_Type");
    }
  }

  final public void I_Type() throws ParseException {
    trace_call("I_Type");
    try {
      jj_consume_token(INSTRUCTION);
      jj_consume_token(REGISTER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(REGISTER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(NUMERIC);
    } finally {
      trace_return("I_Type");
    }
  }

  final public void S_Type() throws ParseException {
    trace_call("S_Type");
    try {
      jj_consume_token(INSTRUCTION);
      jj_consume_token(REGISTER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
      case NUMERIC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMERIC:
          jj_consume_token(NUMERIC);
          break;
        case REGISTER:
          jj_consume_token(REGISTER);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(L_PAREN);
      jj_consume_token(REGISTER);
      jj_consume_token(R_PAREN);
    } finally {
      trace_return("S_Type");
    }
  }

  final public void B_Type() throws ParseException {
    trace_call("B_Type");
    try {
      jj_consume_token(INSTRUCTION);
      jj_consume_token(REGISTER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(REGISTER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(ALPHA);
    } finally {
      trace_return("B_Type");
    }
  }

  final public void U_Type() throws ParseException {
    trace_call("U_Type");
    try {
      jj_consume_token(INSTRUCTION);
      jj_consume_token(REGISTER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERIC:
        jj_consume_token(NUMERIC);
        break;
      case ALPHA:
        jj_consume_token(ALPHA);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("U_Type");
    }
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1801,0x1801,0x20,0x20,0x20,0x20,0x20,0x20400,0x20400,0x20,0x20,0x20,0x28000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[33];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
